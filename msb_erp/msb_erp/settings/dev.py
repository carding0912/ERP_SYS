"""
Django settings for msb_erp project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-rrza3!4)j&l^_6(3p2eny)2-h+t8^k1nysk+%i&bt2!@jvz%9i"

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # DRF框架
    'drf_yasg',  # 自动生成接口文档
    'corsheaders',  # 解决浏览器的跨域问题
    'erp_system',  # 系统管理模块: 包括 用户管理,角色管理,功能菜单管理,权限管理,机构管理,日志模块
    'basic_info',  # 基本信息管理的模块
    'goods_info',   # 商品信息管理模块
    'purchase_info',   # 采购信息管理模块
    'warehouse_info',   # 仓储管理模块

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 首先要解决的,所以要配在第一个(中间件是有加载和返回顺序的)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 设置CORS⽩白名单
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',  # 前端项目的IP和端口
    'http://localhost:8080',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie   凡是出现在⽩白名单中的域名，都可以访问后。

ROOT_URLCONF = 'msb_erp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'msb_erp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# 配置数据库 注意：要安装mysqlclient库
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'erp',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 配置Redis数据库 注
CACHES = {
    "default": {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": {  # 验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# 配置项目日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(filename)s: %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'my_con': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },

        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/erp.log'),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'erp': {  # 自己用的logger应用如下配置
            'handlers': ['console', 'file'],  # 上线之后可以把 console 移除
            'level': 'DEBUG',
            'propagate': True,  # 是否向上一级logger实例传递日志信息
        },
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
        # 'django.db.backends':{
        #     'handlers': ['my_con'],  # 可以同时向终端与文件中输出日志
        #     'propagate': True,  # 是否继续传递日志信息
        #     'level': 'DEBUG',  # 日志器接收的最低日志级别
        # },
    }
}

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        #  配置认证方式的选项【drf的认证是内部循环遍历每一个注册的认证类，一旦认证通过识别到用户身份，则不会继续循环】
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',

        # 'rest_framework.authentication.SessionAuthentication',  # 项目前后端分离不启用session和basic认证
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     # 配置全局认证方式:仅通过认证的用户
    #     'rest_framework.permissions.IsAuthenticated',
    #     'msb_erp.utils.rbac_permissions.RbacPermission'
    # )
}

BASE_API = 'api/'  # 项目BASE API, 如设置时必须以/结尾
# 权限认证白名单
WHITE_LIST = [f'/{BASE_API}user/login/', f'/{BASE_API}user/register/', f'/doc/.*', f'/redoc/.*']
REGEX_URL = '^{url}$'  # 权限匹配时,严格正则url

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'JWT验证': {
            'in': 'header',
            'name': 'Authorization',
            'type': 'apiKey',
        },
    },
}

# JWT配置
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'msb_erp.utils.jwt_handler.jwt_response_handler',  # 此项在utils公共模块下要定义
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 添加自定义用户模型类（应用名.模型类名）
AUTH_USER_MODEL = 'erp_system.UserModel'

# 指定自定义认证类路径
AUTHENTICATION_BACKENDS = ['erp_system.user_auth.UserLoginAuth']

# celery配置
# CELERY_TIMEZONE = 'Asia/Shanghai'  # 时区配置
CELERY_TASK_TRACK_STARTED = True  # 是否自动加载任务配置
CELERY_TASK_TIME_LIMIT = 30 * 60   # 任务结果过期时间配置
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/3'  # Broker配置,使用redis作为消息中间件
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/4'   # 任务结果存储配置,使用redis存储
CELERY_RESULT_SERIALIZER = 'json'  # 配置结果为序列化方案

# # 配置上传件存放的目录，获取media文件夹的完整路径信息
MEDIA_ROOT = BASE_DIR / 'media'

# 设置媒体路由地址信息
MEDIA_URL = '/media/'